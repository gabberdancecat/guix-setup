#!/usr/bin/env -S emacs -Q --script


;;; Info:
;; this is my personal River config, written in Emacs Lisp. Meow.

;;; Notes to self:
;; Emacs macros:
;; ` - everything down is a template; in the output, unchanged.
;; , - eval all shit below NOW. BEFORE output. (subexp)
;; ,@ - eval all shit below NOW, AND splice list to make same level as above. (listexp)

;; Load lib file:
(load (concat (file-name-directory buffer-file-name) "init-elisp-lib.el"))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;
;;; config:
;;;

;;(river-set-modifier 'river-mod "$mod" "Mod4")
;;(river-set-modifier 'river-alt "$alt" "Mod1")
;; (setq river-mod "Super")
;; (setq river-alt "Alt")

(river-spawn "dbus-update-activation-environment SEATD_SOCK DISPLAY WAYLAND_DISPLAY XDG_CURRENT_DESKTOP=river SDL_VIDEODRIVER=wayland MOZ_ENABLE_WAYLAND=1")

(setq test (shell-command "riverctl map normal Super Return spawn foot"))

;; DEBUG
;;(shell-run "mod=Mod4")
;;(shell-run "alt=Mod1")
(river-n-bind ("s-RET" spawn "foot"))
;; test (river-n-bind ("s-M-c" spawn "emacsclient -a '' -c"))

;;; Color
(river-set (background-color 0x946a90)
	   (background-color-focused 0x1e9c8f)
	   (background-color-unfocused 0x040a0a))

;;; keyboard 
;; TODO: vvvv
(river-set (set-repeat 70 220)
	   (keyboard-layout "us,us" -variant "dvp,"
			    -options "grp:sclk_toggle,ctrl:nocaps"))

;;; startup
(river-spawn "swaybg -m fill -i ~/Pictures/wallpapers/chito-yuu-snow-walk.jpg"
	     "killall wlsunset"
	     "wlsunset"
	     "killall waybar"
	     "waybar -c $HOME/.config/waybar/config -s $HOME/.config/waybar/style.css")

;;; system
;; (to add: lock, shutdown, restart)
(river-n-bind ("s-S-Q" exit) ; exit river
	      ("s-S-R" spawn "~/.config/river/init") ; reload
	      ("s-p" spawn bemenu-run)) ; bemenu

;;; windows
(river-n-bind ("s-S-c" close)
	      ;; focus next/prev in layout stack
	      ("s-k" focus-view next)
	      ("s-j" focus-view previous)
	      ;; swap next/prev in layout stack
	      ("s-S-k" focus-view next)
	      ("s-S-j" focus-view previous)
	      ;; ratio adjust
	      ("s-S-l" send-layout-cmd rivertile "main-ratio +.05")
	      ("s-S-h" send-layout-cmd rivertile "main-ratio -.05")
	      ;; bump to focused view
	      ("s-S-RET" zoom)
	      ;; count dec/inc in master-stack?
	      )

;;; floating

;; floating controls
(river-n-bind ("s-SPC" toggle-float) ;; floating mode
	      ;; snap views to screen edges
	      ("s-M-h" move left 100)
	      ("s-M-j" move down 100)
	      ("s-M-k" move up 100)
	      ("s-M-l" move right 100)
	      ;; resize views
	      ("s-M-S-h" resize horizontal -100)
	      ("s-M-S-j" resize vertical 100)
	      ("s-M-S-k" resize vertical -100)
	      ("s-M-S-l" resize horizontal 100))
;; move and resize floating windows
(river-pointer-n-bind ("s-<mouse-left>" move-view)
		      ("s-<mouse-right>" resize-view))

;;; window
(river-n-bind ("s-f" toggle-fullscreen) ;; full screen
	      ;; layout orientation
	      ("s-<up>" send-layout-cmd rivertile "main-location top")
	      ("s-<right>" send-layout-cmd rivertile "main-location right")
	      ("s-<down>" send-layout-cmd rivertile "main-location bottom")
	      ("s-<left>" send-layout-cmd rivertile "main-location left"))

;;; tags and focus
;; tag focused view with all tags
(cl-loop for x to 9
	 do (let ((tags (ash 1 (- x 1))))
	      (eval `(river-n-bind (,(format "s-%s" x) set-focused-tags ,tags)
				   (,(format "s-S-%s" x) set-view-tags ,tags)
				   (,(format "s-C-%s" x) toggle-focused ,tags)
				   (,(format "s-S-C-%s" x) toggle-view-tags ,tags)))))
;; extra for s-0 and s-`
(let ((all-tags (- (ash 1 32) 1)))
  (eval `(river-n-bind ("s-0" set-focused-tags ,all-tags)
		       ("s-S-0" set-view-tags ,all-tags)
		       ("s-`" set-focused-tags ,all-tags)
		       ("s-S-`" set-view-tags ,all-tags))))

;;; special

;; media keys
(let ((binds `(("<XF86AudioRaiseVolume>"
		spawn "pactl set-sink-volume @DEFAULT_SINK@ +5%")
	       ("<XF86AudioLowerVolume>"
		spawn "pactl set-sink-volume @DEFAULT_SINK@ -5%")
	       ("<XF86AudioMute>"
		spawn "pactl set-sink-mute @DEFAULT_SINK@ toggle")
	       ("<XF86MonBrightnessUp>"
		spawn "light -A 5")
	       ("<XF86MonBrightnessDown>"
		spawn "light -U 5"))))
  (eval `(river-set (normal (kbd ,binds))
		    (locked (kbd ,binds)))))

;;; passthrough mode (useful for testing nested wayland servers



;;; applications


(river-n-bind ("s-RET" spawn foot)	; terminal
	      )


;; keymap:

;; (river-declare-keymap my-main-keymap)

;; (river-declare-keymap my-applications-keymap
;; 		      ("f" spawn "exec firefox")
;; 		      ("p" spawn "exec firejail keepassxc")
;; 		      ("d" spawn "exec flatpak run dev.vencord.Vesktop")
;; 		      ("s" spawn "exec flatpak run com.spotify.Client")
;; 		      ("c" spawn "exec flatpak run com.valvesoftware.Steam")
;; 		      ("e" spawn "exec emacsclient -c")
;; 		      ("r" spawn "exec renoise"))

;; (river-map (normal (kbd ("s-c" my-main-keymap))))

;; (river-map (my-main-keymap (kbd ("a" my-applications-keymap))))



;; ;; test
;; (river-map :normal
;; 	   ("s-c" my-main-keymap)
;; 	   :my-main-keymap
;; 	   ("a" my-applications-keymap))
;; ;; test
;; (river-map (:normal
;; 	    "s-c" (my-main-keymap))
;; 	   (:my-main-keymap
;; 	    "a" (my-applications-keymap)))
;; ;; test
;; (river-map (:normal
;; 	    ("s-c" my-main-keymap))
;; 	   (:my-main-keymap
;; 	    ("a" my-applications-keymap)))

;; ;; test [ (river-set (map x)) <- (normal (kbd x)) <- &rest ]
;; TODO: best macro format right here:
;; (river-bind :normal
;; 	    ("s-SPC" toggle-float) 
;; 	    ;; snap views to screen edges
;; 	    ("s-M-h" move left 100)
;; 	    ("s-M-j" move down 100)
;; 	    ("s-M-k" move up 100)
;; 	    ("s-M-l" move right 100)
;; 	    ;; resize views
;; 	    ("s-M-S-h" resize horizontal -100)
;; 	    ("s-M-S-j" resize vertical 100)
;; 	    ("s-M-S-k" resize vertical -100)
;; 	    ("s-M-S-l" resize horizontal 100))

;; (river-set (map (normal (kbd ("s-c" my-main-keymap)))
;; 		(my-main-keymap (kbd ("a" my-applications-keymap)))))

;; (river-n-bind-keymap ("s-g" my-main-keymap))



;;; misc



;;; window rules


;;; start floating


;;; decorations


;;; layouts
(river-set (default-layout rivertile))




;;; end of config


;; Local Variables:
;; mode: emacs-lisp
;; End:
